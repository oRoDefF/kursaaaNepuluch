ОПИСАНИЕ АЛГОРИТМОВ И ЛОГИКИ РАБОТЫ ИНТЕРНЕТ-МАГАЗИНА
1. АЛГОРИТМ РАБОТЫ С КОРЗИНОЙ
1.1. Алгоритм добавления товара в корзину:
   Входные данные: product_id, user
   Выходные данные: результат операции
   Шаги алгоритма:
   1. Получить товар по ID с проверкой доступности
   2. Получить или создать корзину для пользователя
   3. Найти существующий элемент корзины с данным товаром
   4. Если элемент найден:
      - Увеличить количество на 1
      - Сохранить изменения
   5. Если элемент не найден:
      - Создать новый элемент корзины
      - Установить количество = 1
   6. Вернуть редирект на страницу корзины
   Сложность: O(1) для поиска товара, O(1) для операций с корзиной
1.2. Алгоритм обновления количества товара:
   Входные данные: product_id, quantity, user
   Выходные данные: результат операции
   Шаги алгоритма:
   1. Проверить, что количество > 0
   2. Если количество > 0:
      - Найти элемент корзины
      - Обновить количество
      - Сохранить изменения
   3. Если количество <= 0:
      - Удалить элемент из корзины
   4. Вернуть редирект на страницу корзины
   Сложность: O(1)
1.3. Алгоритм расчета общей стоимости корзины:
   Входные данные: cart_object
   Выходные данные: total_price
   Шаги алгоритма:
   1. Инициализировать total_price = 0
   2. Для каждого элемента корзины:
      - Получить стоимость элемента (цена * количество)
      - Добавить к общей сумме
   3. Вернуть total_price
   Сложность: O(n), где n - количество товаров в корзине
2. АЛГОРИТМ СИСТЕМЫ ЗАКАЗОВ
2.1. Алгоритм создания заказа:
   Входные данные: form_data, user, cart
   Выходные данные: order_object или ошибка
   Шаги алгоритма:
   1. Начать атомарную транзакцию
   2. Валидировать данные формы
   3. Создать объект заказа с данными пользователя
   4. Сохранить заказ в базе данных
   5. Для каждого элемента корзины:
      - Создать элемент заказа
      - Установить цену на момент заказа
      - Сохранить элемент заказа
   6. Очистить корзину пользователя
   7. Завершить транзакцию
   8. Вернуть созданный заказ
   Сложность: O(n), где n - количество товаров в корзине
2.2. Алгоритм валидации данных заказа:
   Входные данные: form_data
   Выходные данные: validation_result
   Шаги алгоритма:
   1. Проверить обязательные поля
   2. Валидировать email (формат)
   3. Валидировать телефон (минимум 10 цифр)
   4. Валидировать почтовый индекс (ровно 6 цифр)
   5. Вернуть результат валидации
   Сложность: O(1)
3. АЛГОРИТМ ПАГИНАЦИИ
3.1. Алгоритм разбивки товаров на страницы:
   Входные данные: products_queryset, page_number, items_per_page
   Выходные данные: paginated_products
   Шаги алгоритма:
   1. Создать объект Paginator с товарами
   2. Получить страницу по номеру
   3. Обработать исключения:
      - PageNotAnInteger: вернуть первую страницу
      - EmptyPage: вернуть последнюю страницу
   4. Вернуть объект страницы
   Сложность: O(n), где n - общее количество товаров
3.2. Алгоритм отображения навигации по страницам:
   Входные данные: current_page, total_pages
   Выходные данные: page_numbers_to_show
   Шаги алгоритма:
   1. Определить диапазон отображаемых страниц
   2. Показать текущую страницу
   3. Показать 2 страницы до и после текущей
   4. Добавить кнопки "Предыдущая" и "Следующая"
   Сложность: O(1)
4. АЛГОРИТМ ФИЛЬТРАЦИИ ТОВАРОВ
4.1. Алгоритм фильтрации по категориям:
   Входные данные: category_slug
   Выходные данные: filtered_products
   Шаги алгоритма:
   1. Получить категорию по slug
   2. Если категория не найдена - вернуть 404
   3. Отфильтровать товары по категории
   4. Применить дополнительную фильтрацию (только доступные)
   5. Вернуть отфильтрованный queryset
   Сложность: O(1) для поиска категории, O(n) для фильтрации
5. АЛГОРИТМ ОПТИМИЗАЦИИ ЗАПРОСОВ
5.1. Алгоритм использования индексов:
   - Индекс по полю name в модели Category
   - Составной индекс (id, slug) в модели Product
   - Индекс по полю name в модели Product
   - Индекс по полю created в модели Product (по убыванию)
   - Индекс по полю created в модели Order (по убыванию)
   Преимущества:
   - Ускорение поиска товаров по названию
   - Ускорение фильтрации по категориям
   - Ускорение сортировки по дате создания
5.2. Алгоритм оптимизации запросов к базе данных:
   - Использование select_related() для связанных объектов
   - Использование prefetch_related() для обратных связей
   - Минимизация количества запросов к БД
   - Кэширование часто используемых данных
6. АЛГОРИТМ БЕЗОПАСНОСТИ
6.1. Алгоритм CSRF защиты:
   - Автоматическая генерация CSRF токенов
   - Проверка токенов при POST запросах
   - Валидация токенов на сервере
6.2. Алгоритм аутентификации:
   - Проверка аутентификации пользователя
   - Декоратор @login_required для защищенных views
   - Перенаправление неавторизованных пользователей
7. АЛГОРИТМ ОБРАБОТКИ ИЗОБРАЖЕНИЙ
7.1. Алгоритм загрузки изображений:
   Входные данные: image_file
   Выходные данные: saved_image_path
   Шаги алгоритма:
   1. Валидировать тип файла
   2. Проверить размер файла
   3. Создать уникальное имя файла
   4. Сохранить файл в папку media
   5. Вернуть путь к сохраненному файлу
   Сложность: O(1)
8. АЛГОРИТМ СОЗДАНИЯ SLUG
8.1. Алгоритм автоматического создания slug:
   Входные данные: name_string
   Выходные данные: slug_string
   Шаги алгоритма:
   1. Привести строку к нижнему регистру
   2. Заменить кириллицу на латиницу
   3. Удалить специальные символы
   4. Заменить пробелы на дефисы
   5. Удалить множественные дефисы
   6. Удалить дефисы в начале и конце
   7. Вернуть полученный slug
   Сложность: O(n), где n - длина строки
9. АЛГОРИТМ КОНТЕКСТНЫХ ПРОЦЕССОРОВ
9.1. Алгоритм отображения количества товаров в корзине:
   Входные данные: request
   Выходные данные: cart_items_count
   Шаги алгоритма:
   1. Проверить аутентификацию пользователя
   2. Если пользователь аутентифицирован:
      - Найти корзину пользователя
      - Вычислить общее количество товаров
      - Вернуть количество
   3. Если пользователь не аутентифицирован:
      - Вернуть 0
   Сложность: O(1)
10. АЛГОРИТМ ОБРАБОТКИ ОШИБОК
10.1. Алгоритм обработки 404 ошибок:
    - Использование get_object_or_404() для моделей
    - Возврат пользовательской страницы 404
    - Логирование ошибок для анализа
10.2. Алгоритм валидации форм:
    - Проверка обязательных полей
    - Валидация типов данных
    - Кастомная валидация для специфических полей
    - Возврат ошибок пользователю
